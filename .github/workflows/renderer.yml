name: Build & Deploy Renderer

on:
  push:
    paths:
      - 'renderer/**'
      - '.github/workflows/renderer.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      AWS_REGION:      ${{ vars.AWS_REGION }}
      AWS_ROLE_ARN:    ${{ vars.AWS_ROLE_ARN }}
      ECR_REGISTRY:    ${{ vars.ECR_REGISTRY }}
      ECR_REPOSITORY:  ${{ vars.ECR_REPOSITORY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image
        shell: bash
        working-directory: renderer
        run: |
          set -euo pipefail
          GIT_SHA="$(git rev-parse --short HEAD)"
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${GIT_SHA}"
          docker build -t "${IMAGE_URI}" .
          docker push "${IMAGE_URI}"
          echo "IMAGE_URI=${IMAGE_URI}" >> "$GITHUB_ENV"

      - name: Register new ECS Task Definition revision
        shell: bash
        run: |
          set -euo pipefail

          TD_ARN="$(aws cloudformation describe-stack-resources --stack-name VideoCompute \
            --query "StackResources[?ResourceType=='AWS::ECS::TaskDefinition'].PhysicalResourceId" --output text)"

          aws ecs describe-task-definition --task-definition "$TD_ARN" --query taskDefinition > td.json

          # Patch the container image without heredocs (write a file, then run it)
          cat > patch_td.py <<'PY'
          import json, os
          with open('td.json','r') as f:
              td = json.load(f)
          for k in ['taskDefinitionArn','revision','status','requiresAttributes','compatibilities','registeredAt','registeredBy']:
              td.pop(k, None)
          for c in td.get('containerDefinitions', []):
              if c.get('name') == 'Renderer':
                  c['image'] = os.environ['IMAGE_URI']
          with open('td.new.json','w') as f:
              json.dump(td, f)
          PY
          python3 patch_td.py

          TD_NEW="$(aws ecs register-task-definition --cli-input-json file://td.new.json \
            --query taskDefinition.taskDefinitionArn --output text)"
          FAMILY="$(aws ecs describe-task-definition --task-definition "$TD_NEW" \
            --query 'taskDefinition.family' --output text)"
          echo "FAMILY=${FAMILY}" >> "$GITHUB_ENV"

      - name: Ensure Step Functions uses the family (not a pinned rev)
        shell: bash
        run: |
          set -euo pipefail

          SM_ARN="$(aws cloudformation describe-stack-resources --stack-name VideoWorkflow \
            --query "StackResources[?ResourceType=='AWS::StepFunctions::StateMachine'].PhysicalResourceId" --output text)"

          aws stepfunctions describe-state-machine --state-machine-arn "$SM_ARN" \
            --query definition --output text > def_raw.json

          cat > patch_def.py <<'PY'
          import json, os
          with open('def_raw.json','r') as f:
              raw = f.read()
          d = json.loads(raw)
          d['States']['RenderECS']['Parameters']['TaskDefinition'] = os.environ['FAMILY']
          with open('def.json','w') as f:
              json.dump(d, f, separators=(',', ':'))
          PY
          python3 patch_def.py

          aws stepfunctions update-state-machine --state-machine-arn "$SM_ARN" \
            --definition file://def.json
